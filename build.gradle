plugins {
	id "fabric-loom" version "1.2.+"
	id "io.github.juuxel.loom-vineflower" version "1.+" // Quiltflower, a better decompiler
	id 'maven-publish'
}

version = minecraft_version + '-' + mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}
configurations.configureEach {
	resolutionStrategy.eachDependency {
		if (requested.module.name == "fabric-loader") {
			useVersion(loader_version)
		}
	}
}
repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven { url = "https://maven.quiltmc.org/repository/release" } // QM
	maven { url = "https://maven.parchmentmc.org" } // Parchment
	maven { url = "https://mvn.devos.one/snapshots/" }
	maven {
		url = "https://jitpack.io"
	}
	maven { url = "https://maven.terraformersmc.com/" } // Mod Menu, Trinkets
}

dependencies {
	dependencies(dependencies)
	setup(dependencies)
	devEnv(dependencies)
}
def dependencies(DependencyHandler deps) {
	deps.modImplementation("net.fabricmc.fabric-api:fabric-api:$fabric_version")

	deps.modApi(deps.include("io.github.fabricators_of_create:Porting-Lib:$port_lib_version+$minecraft_version"))
	deps.modApi(deps.include("com.tterrag.registrate_fabric:Registrate:$registrate_version"))
}
def setup(DependencyHandler deps) {
	deps.minecraft("com.mojang:minecraft:$minecraft_version")
	deps.mappings(loom.layered {
		it.mappings("org.quiltmc:quilt-mappings:$minecraft_version+build.$qm_version:intermediary-v2")
		it.parchment("org.parchmentmc.data:parchment-$minecraft_version:$parchment_version@zip")
		it.officialMojangMappings { nameSyntheticMembers = false }
	})
	deps.modImplementation("net.fabricmc:fabric-loader:$loader_version")
}
def devEnv(DependencyHandler deps) {
	deps.modLocalRuntime("com.terraformersmc:modmenu:$modmenu_version")
}
processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = Integer.parseInt(sourceCompatibility)
}
sourceSets {
	main {
		resources {
			srcDir("src/generated/resources")
			exclude("src/generated/resources/.cache")
		}
	}
}
loom {
	accessWidenerPath = file("src/main/resources/krystal_core.accesswidener")

	runs {
		datagen {
			client()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
			vmArg "-Dfabric-api.datagen.modid=krystal_core"
			vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"
		}

		server {
			runDir "run/server"
		}

		gametestServer {
			server()
			name "Headlesss GameTests"
			vmArg "-Dfabric-api.gametest"
			vmArg "-Dfabric-api.gametest.report-file=${project.buildDir}/junit.xml"
			runDir "run/gametest"
		}
	}
}
java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}